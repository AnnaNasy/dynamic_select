#include <stdio.h>
#include <stdlib.h>  
#include <time.h>  
#include <unistd.h>
#include <string.h>
#include <libmemcached/memcached.h>


#define IP_LEN 16
static char best_ip[IP_LEN];
static memcached_st *memc = NULL;  
static memcached_return_t rc;  
static memcached_server_st *server;  

static time_t expiration = 0;  
static uint32_t flags = 0; 


static const char *key = "best_server_ip";  //best_server_ip
static const size_t keylen = 15;
static size_t valuelen = IP_LEN;

/*
 * 前300次请求不处理给了给默认轮询
 * 因为算法会有一个启动时间，否则一开始所有请求全部涌入性能最好的服务器1
 * 由于计算周期最短为一秒， 导致一秒内请求服务器不会变。 这个300次请求的时间
 * 可以给算法计算出所有机器收到请求后的性能对比，更加真实
*/
static uint32_t init_times = 300;


static void freeMemc() {
    memcached_free(memc);
    memc = NULL;
}

static int init() {
    if (memc != NULL) {
        //printf("memc != NULL\n");
        return 0;
    }
    //printf("memc == NULL\n");
    memc = memcached_create(NULL);  /*失败返回NULL*/
    if (memc == NULL) {
        //printf("memcached_create error");
        return -1;
    }
    server = memcached_server_list_append(NULL, "192.168.128.128", 10240, &rc);
    if (MEMCACHED_SUCCESS != rc) {
        //printf("memcached_server_list_append error\n");
        freeMemc();
        return -2;
    }

    rc = memcached_server_push(memc, server);
    if (MEMCACHED_SUCCESS != rc) {
        //printf("memcached_server_push error\n");
        freeMemc();
        return -3;
    }
    memcached_server_list_free(server);
    return 0;
}


static char* getBestServer() {  
    if (init_times > 0) {
        init_times--;
        return NULL;
    }
    int ret = init();
    if ( ret != 0 ) {
        return NULL;
    }

    char *result = memcached_get(memc, key, keylen, &valuelen, &flags, &rc);  
    if(MEMCACHED_SUCCESS == rc) {  
        //printf("Get value:%s successfully\n", result);
        strcpy(best_ip, result);
        free(result);
        return best_ip;
    } else {
        //printf("查询结果失败\n");
        return NULL;
    }   
}
