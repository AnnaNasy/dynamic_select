#! /usr/local/bin/python3
# -*- coding:utf-8 -*-
import time
class LoadInfo():
	'''
	运行在后端服务器上，用于定时获取系统的基本负载情况
	'''
	cpu_info = {}

	_cpu_info_path = "/proc/cpuinfo"
	_cpu_usage_info_path = "/proc/stat"
	_mem_usage_info_path = "/proc/meminfo"
	_net_usage_info_path = "/proc/net/dev"
	_load_avg_info_path = "/proc/loadavg"

	def __init__(self):
		pass

	def set_query_cycle(self):
		pass

	def get_cpu_info( self,  category ):
		'''
		 	获取服务器CPU信息，例如型号，频率
		'''
		if self.cpu_info and category in self.cpu_info:
			return self.cpu_info[category]
		elif self.cpu_info:
			print(self.cpu_info)
			return None
		else:
			with open( self._cpu_info_path, 'r' ) as f:
				for line in f.readlines():
					line_arr = line.split(':')
					if len(line_arr) > 1:
						self.cpu_info[line_arr[0].strip()] = line_arr[1].strip()
		return self.cpu_info[category]
		
	def get_cpu_usage_info(self):
		'''
			1s内CPU使用率 需要sleep 1s
		'''
		cpu_stat_arr1 = []
		cpu_stat_arr2 = []
		with open( self._cpu_usage_info_path, 'r' ) as f:
			line_arr = f.readline().split()
			cpu_stat_arr1 = list(map(int, line_arr[1:]))
		time.sleep(0.5)
		with open( self._cpu_usage_info_path, 'r' ) as f:
			line_arr = f.readline().split()
			cpu_stat_arr2 = list(map(int, line_arr[1:]))
		#print( cpu_stat_arr1 )   
		#print( cpu_stat_arr2 )   
		total = sum(cpu_stat_arr2)- sum(cpu_stat_arr1) 
		idle = cpu_stat_arr2[3] - cpu_stat_arr1[3]
		pcpu = 100 * (total - idle) / total
		#print("total = %d idle = %d pcpu = %f%% " % (total, idle, pcpu))
		return pcpu

	def get_mem_usage_info(self):
		'''
			当前时刻内存使用率
		'''
		mem_info_dic = {}
		with open( self._mem_usage_info_path, 'r' ) as f:
			for line in f.readlines():
				line_arr = line.split(':')
				mem_info_dic[line_arr[0]] = int(line_arr[1].split()[0])
		#print(mem_info_dic)
		MemTotal = mem_info_dic["MemTotal"]
		MemFree = mem_info_dic["MemFree"]
		Buffers = mem_info_dic["Buffers"]
		Cached = mem_info_dic["Cached"]
		pmem = 100 * (MemTotal - (MemFree+Buffers+Cached)) / MemTotal
		#可能返回内存剩余量应该更准确
		#pmem = MemFree + Buffers + Cached
		return pmem


	def get_net_usage_info(self):
		'''
			1s内的网络使用率 带宽为1Mbps 需要sleep 1s
		'''
		band_width = 1 # 1Mbps
		i = 1 
		net_info1 = []
		net_info2 = []
		with open( self._net_usage_info_path, 'r' ) as f:
			for line in f.readlines():
				if i == 3:
					net_info1 = line.split()
					i = 1 
					break
				else:
					i += 1
		time.sleep(0.5)
		with open( self._net_usage_info_path, 'r' ) as f:
			for line in f.readlines():
				if i == 3:
					net_info2 = line.split()
					break
				else:
					i += 1
		insize_1 = int(net_info1[1])
		outsize_1 = int(net_info1[9])
		insize_2 = int(net_info2[1])
		outsize_2 = int(net_info2[9])
		pnet = 100 * (insize_2+outsize_2-insize_1-outsize_1)*8/(1000000*band_width)
		#print(pnet)
		return pnet

	def get_io_usage_info(self):
		pass

	def get_load_avg_info(self):
		'''
			获取近1分钟内系统负载
		'''
		load_avg_info = []
		with open( self._load_avg_info_path, 'r' ) as f:
			load_avg_info = f.read().split()
		#print(float(load_avg_info[0])) 
		return float(load_avg_info[0])



server_infos = LoadInfo()